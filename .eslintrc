{
  "root": true,
  "env": {
    "browser": true,
    "node": true
  },
  "extends": [
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "react-app",
    "react-app/jest",
  ],
  "ignorePatterns": [
    "**/*.css.d.ts" // files generated by @teamsupercell/typings-for-css-modules-loader
  ],
  "rules": {
    // This rule is already covered by the TypeScript compiler.
    "import/default": "off",
    // This rule is already covered by the TypeScript compiler.
    "import/no-unresolved": "off",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": "warn",
    "react/jsx-filename-extension": "off",
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "comma-dangle": ["error", "always-multiline"],
    "linebreak-style": [
      "error",
      "windows"
    ],
    "semi": [
      "error",
      "never"
    ],
    "default-case": "off",
    "no-case-declarations": "off",
    "no-else-return": "off",
    "sort-imports": "off",
    "max-len": "off",
    "array-bracket-spacing": "off",
    "arrow-parens": "off",
    "object-shorthand": "off",
    "import/order": "off",
    "import/first": "off",
    "implicit-arrow-linebreak": "off",
    "import/extensions": "off", // TS say need remove '.ts'
    "@typescript-eslint/no-explicit-any": "off",
    "import/prefer-default-export": "off",
    "no-shadow": "off", // doubtful
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "max-classes-per-file": "off",
    "no-void": "off", // important for void promise
    "@typescript-eslint/explicit-function-return-type": "off",
    "no-console": "error",
    "no-lone-blocks": "off",

    // This rule is already covered by the TypeScript compiler:
    "no-unreachable": "off",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "off",
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [
          ".js",
          ".jsx",
          ".ts",
          ".tsx"
        ]
      },
      "webpack": {
        "config": "./webpack.config.js"
      },
      "react": {
        "createClass": "createReactClass", // Regex for Component Factory to use,
                                           // default to "createReactClass"
        "pragma": "React",  // Pragma to use, default to "React"
        "fragment": "Fragment",  // Fragment to use (may be a property of <pragma>), default to "Fragment"
        "version": "detect", // React version. "detect" automatically picks the version you have installed.
                             // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
                             // default to latest and warns if missing
                             // It will default to "detect" in the future
        "flowVersion": "0.53" // Flow version
      },
      "propWrapperFunctions": [
          // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
          "forbidExtraProps",
          {"property": "freeze", "object": "Object"},
          {"property": "myFavoriteWrapper"},
          // for rules that check exact prop wrappers
          {"property": "forbidExtraProps", "exact": true}
      ],
      "componentWrapperFunctions": [
          // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.
          "observer", // `property`
          {"property": "styled"}, // `object` is optional
          {"property": "observer", "object": "Mobx"},
          {"property": "observer", "object": "<pragma>"} // sets `object` to whatever value `settings.react.pragma` is set to
      ],
      "formComponents": [
        // Components used as alternatives to <form> for forms, eg. <Form endpoint={ url } />
        "CustomForm",
        {"name": "Form", "formAttribute": "endpoint"}
      ],
      "linkComponents": [
        // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
        "Hyperlink",
        {"name": "Link", "linkAttribute": "to"}
      ],
    }
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks",
  ],
}
